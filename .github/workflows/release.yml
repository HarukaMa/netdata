---
# Workflow for triggering a release.
name: Release
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: # Dispatch runs build and validate, then push to the appropriate storage location.
    inputs:
      type:
        description: Build Type
        default: nightly
        required: true
      version:
        description: Version Tag
        default: nightly
        required: true
concurrency: # This keeps multiple instances of the job from running concurrently for the same ref and event type.
  group: release-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
jobs:
  update-changelogs:
    name: Update changelog
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.target.outputs.ref }}
      version: ${{ steps.target.outputs.version }}
      type: ${{ steps.target.outputs.type }}
      run: ${{ steps.target.outputs.run }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
      - name: sync
        id: sync
        env:
          GITHUB_TOKEN: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
        run: |
          git config user.name "Haruka"
          git config user.email "mrx@hcc.im"
          git remote add upstream https://github.com/netdata/netdata
          git fetch upstream
          if [[ "${{ github.event.head_commit.message }}" =~ "Update changelog and version for nightly build" ]]; then 
              git reset --hard HEAD^
          fi
          git rebase upstream/master master
          git push -f origin master
      - name: Prepare base ref
        id: target
        run: >-
          .github/scripts/prepare-release-base.sh \
              ${{ github.repository }} \
              ${{ github.event_name }} \
              ${{ github.event.inputs.type }} \
              ${{ github.event.inputs.version }} \
              ${{ secrets.NETDATA_RELEASE_TEST }}
      - name: Generate Nightly Changleog
        id: nightly-changelog
        if: steps.target.outputs.run == 'true' && steps.target.outputs.type == 'nightly'
        uses: heinrichreimer/github-changelog-generator-action@v2.4
        with:
          bugLabels: IGNOREBUGS
          excludeLabels: "stale,duplicate,question,invalid,wontfix,discussion,no changelog"
          issues: false
          sinceTag: v1.10.0
          token: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
          unreleasedLabel: "**Next release**"
          verbose: true
          maxIssues: 500
      - name: Generate Release Changelog
        id: release-changelog
        if: steps.target.outputs.run == 'true' && steps.target.outputs.type != 'nightly'
        uses: heinrichreimer/github-changelog-generator-action@v2.4
        with:
          bugLabels: IGNOREBUGS
          excludeLabels: "stale,duplicate,question,invalid,wontfix,discussion,no changelog"
          futureRelease: ${{ github.event.inputs.version }}
          issues: false
          sinceTag: v1.10.0
          token: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
          unreleasedLabel: "**Next release**"
          verbose: true
          maxIssues: 500
      - name: Commit Changes
        id: commit
        if: steps.target.outputs.run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
        run: |
          git config user.name "Haruka"
          git config user.email "mrx@hcc.im"ã€€
          git add packaging/version CHANGELOG.md
          git commit -m "[ci skip] ${{ steps.target.outputs.message }}"
          if [ "${{ steps.target.outputs.type }}" != "nightly" ]; then
            git tag -a "${{ github.event.inputs.version }}" -m "${{ steps.target.outputs.message }}"
          fi
          if [ -n "${{ steps.target.outputs.new-branch }}" ]; then
            git branch "${{ steps.target.outputs.new-branch }}"
          fi
          git push --tags origin "${{ steps.target.outputs.branch }}"
          if [ -n "${{ steps.target.outputs.new-branch }}" ]; then
            git push origin "${{ steps.target.outputs.new-branch }}"
          fi

  trigger-artifacts:
    name: Trigger artifact builds
    runs-on: ubuntu-latest
    needs: update-changelogs
    if: needs.update-changelogs.outputs.run == 'true'
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-changelogs.outputs.ref }}
      - name: Trigger build
        id: trigger
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.NETDATABOT_GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          workflow: build.yml
          ref: ${{ needs.update-changelogs.outputs.ref }}
          inputs: '{"version": "${{ needs.update-changelogs.outputs.version }}", "type": "${{ needs.update-changelogs.outputs.type }}"}'